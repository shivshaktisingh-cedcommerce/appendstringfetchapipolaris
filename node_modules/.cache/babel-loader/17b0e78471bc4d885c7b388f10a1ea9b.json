{"ast":null,"code":"import { tokensToRems } from './utilities.mjs';\nimport { breakpoints } from './token-groups/breakpoints.mjs';\nimport { depth } from './token-groups/depth.mjs';\nimport { font } from './token-groups/font.mjs';\nimport { legacy } from './token-groups/legacy.mjs';\nimport { colors } from './token-groups/colors.mjs';\nimport { motion } from './token-groups/motion.mjs';\nimport { shape } from './token-groups/shape.mjs';\nimport { spacing } from './token-groups/spacing.mjs';\nimport { zIndex } from './token-groups/zIndex.mjs';\nvar metadata = createMetadata({\n  breakpoints: tokensToRems(breakpoints),\n  colors: colors,\n  depth: depth,\n  font: tokensToRems(font),\n  legacy: tokensToRems(legacy),\n  motion: motion,\n  shape: tokensToRems(shape),\n  spacing: tokensToRems(spacing),\n  zIndex: zIndex\n});\n/**\n * Identity function that simply returns the provided tokens with metadata, but additionally\n * validates the input matches the `Metadata` type exactly and infers all members.\n */\n\nfunction createMetadata(metadata) {\n  return metadata;\n}\n\nexport { createMetadata, metadata };","map":{"version":3,"names":["tokensToRems","breakpoints","depth","font","legacy","colors","motion","shape","spacing","zIndex","metadata","createMetadata"],"sources":["/home/cedcoss/react/After interview/polarisdashoboard/node_modules/@shopify/polaris-tokens/dist/esm/src/metadata.mjs"],"sourcesContent":["import { tokensToRems } from './utilities.mjs';\nimport { breakpoints } from './token-groups/breakpoints.mjs';\nimport { depth } from './token-groups/depth.mjs';\nimport { font } from './token-groups/font.mjs';\nimport { legacy } from './token-groups/legacy.mjs';\nimport { colors } from './token-groups/colors.mjs';\nimport { motion } from './token-groups/motion.mjs';\nimport { shape } from './token-groups/shape.mjs';\nimport { spacing } from './token-groups/spacing.mjs';\nimport { zIndex } from './token-groups/zIndex.mjs';\n\nvar metadata = createMetadata({\n  breakpoints: tokensToRems(breakpoints),\n  colors: colors,\n  depth: depth,\n  font: tokensToRems(font),\n  legacy: tokensToRems(legacy),\n  motion: motion,\n  shape: tokensToRems(shape),\n  spacing: tokensToRems(spacing),\n  zIndex: zIndex\n});\n/**\n * Identity function that simply returns the provided tokens with metadata, but additionally\n * validates the input matches the `Metadata` type exactly and infers all members.\n */\n\nfunction createMetadata(metadata) {\n  return metadata;\n}\n\nexport { createMetadata, metadata };\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,2BAAvB;AAEA,IAAIC,QAAQ,GAAGC,cAAc,CAAC;EAC5BV,WAAW,EAAED,YAAY,CAACC,WAAD,CADG;EAE5BI,MAAM,EAAEA,MAFoB;EAG5BH,KAAK,EAAEA,KAHqB;EAI5BC,IAAI,EAAEH,YAAY,CAACG,IAAD,CAJU;EAK5BC,MAAM,EAAEJ,YAAY,CAACI,MAAD,CALQ;EAM5BE,MAAM,EAAEA,MANoB;EAO5BC,KAAK,EAAEP,YAAY,CAACO,KAAD,CAPS;EAQ5BC,OAAO,EAAER,YAAY,CAACQ,OAAD,CARO;EAS5BC,MAAM,EAAEA;AAToB,CAAD,CAA7B;AAWA;AACA;AACA;AACA;;AAEA,SAASE,cAAT,CAAwBD,QAAxB,EAAkC;EAChC,OAAOA,QAAP;AACD;;AAED,SAASC,cAAT,EAAyBD,QAAzB"},"metadata":{},"sourceType":"module"}
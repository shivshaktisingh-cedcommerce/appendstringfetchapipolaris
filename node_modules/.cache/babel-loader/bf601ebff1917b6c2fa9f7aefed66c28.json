{"ast":null,"code":"import { useState, useCallback } from 'react';\nlet SelectionType;\n\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n})(SelectionType || (SelectionType = {}));\n\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\n\nfunction useIndexResourceState(resources) {\n  let {\n    selectedResources: initSelectedResources = [],\n    allResourcesSelected: initAllResourcesSelected = false,\n    resourceIDResolver = defaultResourceIDResolver,\n    resourceFilter = undefined\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    selectedResources: [],\n    allResourcesSelected: false,\n    resourceIDResolver: defaultResourceIDResolver,\n    resourceFilter: undefined\n  };\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n\n      case SelectionType.All:\n      case SelectionType.Page:\n        if (resourceFilter) {\n          const filteredResources = resources.filter(resourceFilter);\n          setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);\n        } else {\n          setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        }\n\n        break;\n\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(newSelectedResources => {\n          const ids = [];\n          const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;\n\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            if (filteredResources.includes(resources[i])) {\n              const id = resourceIDResolver(resources[i]);\n\n              if (isSelecting && !newSelectedResources.includes(id) || !isSelecting && newSelectedResources.includes(id)) {\n                ids.push(id);\n              }\n            }\n          }\n\n          return isSelecting ? [...newSelectedResources, ...ids] : newSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n    }\n  }, [allResourcesSelected, resourceFilter, selectedResources.length, resources, resourceIDResolver]);\n  const clearSelection = useCallback(() => {\n    setSelectedResources([]);\n    setAllResourcesSelected(false);\n  }, []);\n  const removeSelectedResources = useCallback(removeResources => {\n    const selectedResourcesCopy = [...selectedResources];\n    const newSelectedResources = selectedResourcesCopy.filter(resource => !removeResources.includes(resource));\n    setSelectedResources(newSelectedResources);\n\n    if (newSelectedResources.length === 0) {\n      setAllResourcesSelected(false);\n    }\n  }, [selectedResources]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange,\n    clearSelection,\n    removeSelectedResources\n  };\n}\n\nexport { SelectionType, useIndexResourceState };","map":{"version":3,"names":["useState","useCallback","SelectionType","defaultResourceIDResolver","resource","id","Error","useIndexResourceState","resources","selectedResources","initSelectedResources","allResourcesSelected","initAllResourcesSelected","resourceIDResolver","resourceFilter","undefined","setSelectedResources","setAllResourcesSelected","handleSelectionChange","selectionType","isSelecting","selection","All","Single","newSelectedResources","filter","Page","filteredResources","length","map","Multi","ids","i","includes","push","clearSelection","removeSelectedResources","removeResources","selectedResourcesCopy"],"sources":["/home/cedcoss/react/After interview/polarisdashoboard/node_modules/@shopify/polaris/build/esm/utilities/use-index-resource-state.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nlet SelectionType;\n\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n})(SelectionType || (SelectionType = {}));\n\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\n\nfunction useIndexResourceState(resources, {\n  selectedResources: initSelectedResources = [],\n  allResourcesSelected: initAllResourcesSelected = false,\n  resourceIDResolver = defaultResourceIDResolver,\n  resourceFilter = undefined\n} = {\n  selectedResources: [],\n  allResourcesSelected: false,\n  resourceIDResolver: defaultResourceIDResolver,\n  resourceFilter: undefined\n}) {\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n\n      case SelectionType.All:\n      case SelectionType.Page:\n        if (resourceFilter) {\n          const filteredResources = resources.filter(resourceFilter);\n          setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);\n        } else {\n          setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        }\n\n        break;\n\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(newSelectedResources => {\n          const ids = [];\n          const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;\n\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            if (filteredResources.includes(resources[i])) {\n              const id = resourceIDResolver(resources[i]);\n\n              if (isSelecting && !newSelectedResources.includes(id) || !isSelecting && newSelectedResources.includes(id)) {\n                ids.push(id);\n              }\n            }\n          }\n\n          return isSelecting ? [...newSelectedResources, ...ids] : newSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n    }\n  }, [allResourcesSelected, resourceFilter, selectedResources.length, resources, resourceIDResolver]);\n  const clearSelection = useCallback(() => {\n    setSelectedResources([]);\n    setAllResourcesSelected(false);\n  }, []);\n  const removeSelectedResources = useCallback(removeResources => {\n    const selectedResourcesCopy = [...selectedResources];\n    const newSelectedResources = selectedResourcesCopy.filter(resource => !removeResources.includes(resource));\n    setSelectedResources(newSelectedResources);\n\n    if (newSelectedResources.length === 0) {\n      setAllResourcesSelected(false);\n    }\n  }, [selectedResources]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange,\n    clearSelection,\n    removeSelectedResources\n  };\n}\n\nexport { SelectionType, useIndexResourceState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}